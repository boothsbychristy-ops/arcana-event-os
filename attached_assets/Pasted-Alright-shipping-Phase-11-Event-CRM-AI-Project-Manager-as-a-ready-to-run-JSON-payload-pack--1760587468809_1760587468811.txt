Alright—shipping **Phase 11: Event CRM + AI Project Manager** as a **ready-to-run JSON payload pack** you can paste into Replit’s file editor (or your loader script). It’s sized to compile cleanly with your current **Express + Vite + Drizzle (Postgres)** stack, and it keeps the neon black-glass UI vibes.

---

# 📦 `PAYLOAD_PHASE_11.json`

```json
{
  "version": "11.0.0",
  "description": "Phase 11 — Event CRM + AI Project Manager (client approvals, task templates, agents scaffold, neon UI)",
  "changes": [
    {
      "path": "shared/schema.ts",
      "action": "patch_or_create",
      "contents": "import { pgTable, text, timestamp, uuid, integer, boolean, jsonb } from 'drizzle-orm/pg-core';\n\n// 🔐 Users already exist. We extend with minimal references only where needed.\n\nexport const crmClients = pgTable('crm_clients', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  ownerId: uuid('owner_id').notNull(),\n  name: text('name').notNull(),\n  email: text('email'),\n  phone: text('phone'),\n  organization: text('organization'),\n  notes: text('notes'),\n  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow()\n});\n\nexport const bookings = pgTable('bookings', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  ownerId: uuid('owner_id').notNull(),\n  clientId: uuid('client_id').notNull(),\n  title: text('title').notNull(),\n  serviceType: text('service_type').notNull(), // photobooth | dj | bartender | multi\n  startAt: timestamp('start_at', { withTimezone: true }).notNull(),\n  endAt: timestamp('end_at', { withTimezone: true }).notNull(),\n  venueName: text('venue_name'),\n  venueAddress: text('venue_address'),\n  status: text('status').notNull().default('lead'), // lead|proposal|booked|fulfilled|renewal\n  packageJson: jsonb('package_json'), // selected package + add-ons\n  pricingCents: integer('pricing_cents').default(0),\n  depositCents: integer('deposit_cents').default(0),\n  balanceCents: integer('balance_cents').default(0),\n  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow()\n});\n\nexport const approvals = pgTable('approvals', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  ownerId: uuid('owner_id').notNull(),\n  bookingId: uuid('booking_id').notNull(),\n  kind: text('kind').notNull(), // template|overlay|backdrop|ai_prompt|virtual_bg\n  title: text('title').notNull(),\n  draftUrl: text('draft_url'), // stored preview\n  assetsJson: jsonb('assets_json'), // array of files/urls used\n  status: text('status').notNull().default('draft'), // draft|sent|feedback|approved|rejected\n  feedback: text('feedback'),\n  clientVisible: boolean('client_visible').default(true),\n  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow()\n});\n\nexport const tasks = pgTable('tasks', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  ownerId: uuid('owner_id').notNull(),\n  bookingId: uuid('booking_id').notNull(),\n  title: text('title').notNull(),\n  description: text('description'),\n  dueAt: timestamp('due_at', { withTimezone: true }),\n  offsetDays: integer('offset_days'), // relative to event start\n  offsetDirection: text('offset_direction'), // before|after\n  assigneeId: uuid('assignee_id'),\n  clientVisible: boolean('client_visible').default(false),\n  done: boolean('done').default(false),\n  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow()\n});\n\nexport const agentLogs = pgTable('agent_logs', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  ownerId: uuid('owner_id').notNull(),\n  agent: text('agent').notNull(), // drive_watcher|social|reminder|vision\n  bookingId: uuid('booking_id'),\n  level: text('level').default('info'),\n  message: text('message').notNull(),\n  meta: jsonb('meta'),\n  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow()\n});\n"
    },
    {
      "path": "drizzle/00041_phase11_event_crm.sql",
      "action": "create",
      "contents": "-- Phase 11 Migrations: Event CRM + Approvals + Tasks + Agent Logs\nCREATE TABLE IF NOT EXISTS crm_clients (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  owner_id uuid NOT NULL,\n  name text NOT NULL,\n  email text,\n  phone text,\n  organization text,\n  notes text,\n  created_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS bookings (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  owner_id uuid NOT NULL,\n  client_id uuid NOT NULL,\n  title text NOT NULL,\n  service_type text NOT NULL,\n  start_at timestamptz NOT NULL,\n  end_at timestamptz NOT NULL,\n  venue_name text,\n  venue_address text,\n  status text NOT NULL DEFAULT 'lead',\n  package_json jsonb,\n  pricing_cents int DEFAULT 0,\n  deposit_cents int DEFAULT 0,\n  balance_cents int DEFAULT 0,\n  created_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS approvals (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  owner_id uuid NOT NULL,\n  booking_id uuid NOT NULL,\n  kind text NOT NULL,\n  title text NOT NULL,\n  draft_url text,\n  assets_json jsonb,\n  status text NOT NULL DEFAULT 'draft',\n  feedback text,\n  client_visible boolean DEFAULT true,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS tasks (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  owner_id uuid NOT NULL,\n  booking_id uuid NOT NULL,\n  title text NOT NULL,\n  description text,\n  due_at timestamptz,\n  offset_days int,\n  offset_direction text,\n  assignee_id uuid,\n  client_visible boolean DEFAULT false,\n  done boolean DEFAULT false,\n  created_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS agent_logs (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  owner_id uuid NOT NULL,\n  agent text NOT NULL,\n  booking_id uuid,\n  level text DEFAULT 'info',\n  message text NOT NULL,\n  meta jsonb,\n  created_at timestamptz DEFAULT now()\n);\n\n-- Minimal FKs (align to your users table name if different)\n-- ALTER TABLE crm_clients ADD CONSTRAINT crm_clients_owner_fk FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE;\n-- ALTER TABLE bookings ADD CONSTRAINT bookings_client_fk FOREIGN KEY (client_id) REFERENCES crm_clients(id) ON DELETE CASCADE;\n-- ALTER TABLE approvals ADD CONSTRAINT approvals_booking_fk FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE;\n-- ALTER TABLE tasks ADD CONSTRAINT tasks_booking_fk FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE;\n"
    },
    {
      "path": "server/routes.crm.ts",
      "action": "create",
      "contents": "import { Router } from 'express';\nimport { z } from 'zod';\nimport { db } from './db';\nimport * as schema from '../shared/schema';\nimport { eq, and, desc } from 'drizzle-orm';\n\n// Assumes req.user.id and tenant guard already wired in server/index.ts\nconst r = Router();\n\nfunction owner(req: any) { if (!req.user?.id) throw new Error('auth'); return req.user.id; }\n\n// --- Clients ---\nr.get('/api/crm/clients', async (req: any, res) => {\n  const rows = await db.select().from(schema.crmClients)\n    .where(eq(schema.crmClients.ownerId, owner(req)))\n    .orderBy(desc(schema.crmClients.createdAt));\n  res.json(rows);\n});\n\nr.post('/api/crm/clients', async (req: any, res) => {\n  const s = z.object({ name: z.string().min(1), email: z.string().email().optional(), phone: z.string().optional(), organization: z.string().optional(), notes: z.string().optional() });\n  const p = s.safeParse(req.body); if (!p.success) return res.status(400).json({ error: p.error.flatten() });\n  const [row] = await db.insert(schema.crmClients).values({ ownerId: owner(req), ...p.data }).returning();\n  res.status(201).json(row);\n});\n\n// --- Bookings ---\nr.get('/api/bookings', async (req: any, res) => {\n  const rows = await db.select().from(schema.bookings)\n    .where(eq(schema.bookings.ownerId, owner(req)))\n    .orderBy(desc(schema.bookings.createdAt));\n  res.json(rows);\n});\n\nr.post('/api/bookings', async (req: any, res) => {\n  const s = z.object({ clientId: z.string().uuid(), title: z.string().min(1), serviceType: z.enum(['photobooth','dj','bartender','multi']), startAt: z.string(), endAt: z.string(), venueName: z.string().optional(), venueAddress: z.string().optional(), packageJson: z.any().optional(), pricingCents: z.number().int().optional(), depositCents: z.number().int().optional() });\n  const p = s.safeParse(req.body); if (!p.success) return res.status(400).json({ error: p.error.flatten() });\n  const [row] = await db.insert(schema.bookings).values({ ownerId: owner(req), ...p.data, balanceCents: (p.data.pricingCents ?? 0) - (p.data.depositCents ?? 0) }).returning();\n  res.status(201).json(row);\n});\n\nr.patch('/api/bookings/:id/status', async (req: any, res) => {\n  const s = z.object({ status: z.enum(['lead','proposal','booked','fulfilled','renewal']) });\n  const p = s.safeParse(req.body); if (!p.success) return res.status(400).json({ error: p.error.flatten() });\n  const [row] = await db.update(schema.bookings)\n    .set({ status: p.data.status })\n    .where(and(eq(schema.bookings.ownerId, owner(req)), eq(schema.bookings.id, req.params.id)))\n    .returning();\n  res.json(row);\n});\n\n// --- Approvals (upload -> review -> feedback -> approval) ---\nr.get('/api/approvals', async (req: any, res) => {\n  const rows = await db.select().from(schema.approvals)\n    .where(eq(schema.approvals.ownerId, owner(req)))\n    .orderBy(desc(schema.approvals.createdAt));\n  res.json(rows);\n});\n\nr.post('/api/approvals', async (req: any, res) => {\n  const s = z.object({ bookingId: z.string().uuid(), kind: z.enum(['template','overlay','backdrop','ai_prompt','virtual_bg']), title: z.string().min(1), draftUrl: z.string().url().optional(), assetsJson: z.any().optional(), clientVisible: z.boolean().optional() });\n  const p = s.safeParse(req.body); if (!p.success) return res.status(400).json({ error: p.error.flatten() });\n  const [row] = await db.insert(schema.approvals).values({ ownerId: owner(req), status: 'draft', ...p.data }).returning();\n  res.status(201).json(row);\n});\n\nr.patch('/api/approvals/:id', async (req: any, res) => {\n  const s = z.object({ status: z.enum(['draft','sent','feedback','approved','rejected']).optional(), feedback: z.string().optional(), draftUrl: z.string().url().optional(), assetsJson: z.any().optional() });\n  const p = s.safeParse(req.body); if (!p.success) return res.status(400).json({ error: p.error.flatten() });\n  const [row] = await db.update(schema.approvals).set({ ...p.data, updatedAt: new Date() })\n    .where(and(eq(schema.approvals.ownerId, owner(req)), eq(schema.approvals.id, req.params.id)))\n    .returning();\n  res.json(row);\n});\n\n// --- Tasks (templateable, relative deadlines) ---\nr.get('/api/tasks', async (req: any, res) => {\n  const rows = await db.select().from(schema.tasks)\n    .where(eq(schema.tasks.ownerId, owner(req)))\n    .orderBy(desc(schema.tasks.createdAt));\n  res.json(rows);\n});\n\nr.post('/api/tasks', async (req: any, res) => {\n  const s = z.object({ bookingId: z.string().uuid(), title: z.string().min(1), description: z.string().optional(), dueAt: z.string().optional(), offsetDays: z.number().int().optional(), offsetDirection: z.enum(['before','after']).optional(), assigneeId: z.string().uuid().optional(), clientVisible: z.boolean().optional() });\n  const p = s.safeParse(req.body); if (!p.success) return res.status(400).json({ error: p.error.flatten() });\n  const [row] = await db.insert(schema.tasks).values({ ownerId: owner(req), ...p.data }).returning();\n  res.status(201).json(row);\n});\n\nr.patch('/api/tasks/:id', async (req: any, res) => {\n  const s = z.object({ title: z.string().optional(), description: z.string().optional(), dueAt: z.string().optional(), done: z.boolean().optional(), assigneeId: z.string().uuid().optional(), clientVisible: z.boolean().optional() });\n  const p = s.safeParse(req.body); if (!p.success) return res.status(400).json({ error: p.error.flatten() });\n  const [row] = await db.update(schema.tasks).set(p.data)\n    .where(and(eq(schema.tasks.ownerId, owner(req)), eq(schema.tasks.id, req.params.id)))\n    .returning();\n  res.json(row);\n});\n\nexport default r;\n"
    },
    {
      "path": "server/agents.ts",
      "action": "create",
      "contents": "import { db } from './db';\nimport * as schema from '../shared/schema';\n\nasync function log(ownerId: string, agent: string, message: string, level: 'info'|'warn'|'error'='info', meta?: any) {\n  await db.insert(schema.agentLogs).values({ ownerId, agent, level, message, meta });\n}\n\n// 🗂️ Drive Watcher (stub): pass file list, it auto-builds CSV rows of URLs\nexport async function driveWatcher(ownerId: string, bookingId: string, files: {name: string; url: string;}[]) {\n  await log(ownerId, 'drive_watcher', `Detected ${files.length} new files`, 'info', { bookingId, files: files.slice(0,5) });\n  // hook: store CSV artifact in your storage, or push to approvals/assets\n}\n\n// 📣 Social Agent (stub): craft caption & queue post\nexport async function socialAgent(ownerId: string, bookingId: string, galleryUrl: string) {\n  const caption = `Highlights are live ➜ ${galleryUrl}`;\n  await log(ownerId, 'social', 'Queued social post', 'info', { bookingId, caption });\n}\n\n// 🔔 Reminder Agent (stub): approvals & payments nudges\nexport async function reminderAgent(ownerId: string, bookingId: string, kind: 'approval'|'payment') {\n  await log(ownerId, 'reminder', `Scheduled ${kind} reminder`, 'info', { bookingId });\n}\n\n// 🧠 Vision Agent (stub): face tagging / smart grouping\nexport async function visionAgent(ownerId: string, bookingId: string, galleryUrl: string) {\n  await log(ownerId, 'vision', 'Analyzing gallery for smart tags', 'info', { bookingId, galleryUrl });\n}\n"
    },
    {
      "path": "server/index.ts",
      "action": "patch",
      "contents": "// ➕ mount CRM routes (insert near other router mounts)\nimport crmRoutes from './routes.crm';\napp.use(crmRoutes);\n"
    },
    {
      "path": "client/src/pages/CRM.tsx",
      "action": "create",
      "contents": "import { useEffect, useState } from 'react';\n\nexport default function CRM() {\n  const [clients, setClients] = useState<any[]>([]);\n  const [bookings, setBookings] = useState<any[]>([]);\n  const [approvals, setApprovals] = useState<any[]>([]);\n  const [tasks, setTasks] = useState<any[]>([]);\n\n  useEffect(() => { (async () => {\n    const [c,b,a,t] = await Promise.all([\n      fetch('/api/crm/clients').then(r=>r.json()),\n      fetch('/api/bookings').then(r=>r.json()),\n      fetch('/api/approvals').then(r=>r.json()),\n      fetch('/api/tasks').then(r=>r.json())\n    ]);\n    setClients(c); setBookings(b); setApprovals(a); setTasks(t);\n  })(); }, []);\n\n  return (\n    <div className=\"min-h-screen bg-neutral-950 text-neutral-100\">\n      <div className=\"mx-auto max-w-7xl p-6\">\n        <h1 className=\"text-3xl font-semibold tracking-tight\">Event CRM · <span className=\"text-pink-400\">Neon</span></h1>\n        <p className=\"text-neutral-400 mt-1\">Black-glass dashboard — pipelines, approvals, and tasks at a glance.</p>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mt-8\">\n          <GlassCard title={`Clients (${clients.length})`}><List data={clients} keys={[\"name\",\"email\"]} /></GlassCard>\n          <GlassCard title={`Bookings (${bookings.length})`} className=\"lg:col-span-2\"><List data={bookings} keys={[\"title\",\"serviceType\",\"status\"]} /></GlassCard>\n          <GlassCard title={`Approvals (${approvals.length})`}><List data={approvals} keys={[\"title\",\"kind\",\"status\"]} /></GlassCard>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6\">\n          <GlassCard title={`Tasks (${tasks.length})`} className=\"lg:col-span-2\"><List data={tasks} keys={[\"title\",\"done\",\"dueAt\"]} /></GlassCard>\n          <GlassCard title=\"Quick Actions\">\n            <ul className=\"space-y-3 text-sm\">\n              <li><a className=\"text-pink-400 hover:underline\" href=\"/approvals\">Open Approvals Center</a></li>\n              <li><a className=\"text-pink-400 hover:underline\" href=\"/projects\">Open Projects Board</a></li>\n            </ul>\n          </GlassCard>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction GlassCard({ title, children, className=\"\" }: any){\n  return (\n    <div className={`rounded-2xl p-5 bg-white/5 backdrop-blur border border-white/10 shadow-[0_0_20px_rgba(255,0,128,.15)] ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-lg font-medium\">{title}</h2>\n        <div className=\"w-2 h-2 rounded-full bg-pink-500 shadow-[0_0_12px_#ec4899]\"></div>\n      </div>\n      <div className=\"mt-4\">{children}</div>\n    </div>\n  );\n}\n\nfunction List({ data, keys }: { data:any[]; keys:string[]; }){\n  if (!data?.length) return <div className=\"text-neutral-400\">No data yet.</div>;\n  return (\n    <ul className=\"divide-y divide-white/10\">\n      {data.map((row:any) => (\n        <li key={row.id} className=\"py-3 flex items-center justify-between\">\n          <div className=\"space-x-3 text-sm\">\n            {keys.map(k => <span key={k} className=\"text-neutral-300\">{String(row[k] ?? '')}</span>)}\n          </div>\n          <span className=\"text-xs text-neutral-500\">{new Date(row.createdAt ?? Date.now()).toLocaleString()}</span>\n        </li>\n      ))}\n    </ul>\n  );\n}\n"
    },
    {
      "path": "client/src/pages/Approvals.tsx",
      "action": "create",
      "contents": "import { useEffect, useState } from 'react';\n\nexport default function Approvals(){\n  const [rows, setRows] = useState<any[]>([]);\n  useEffect(()=>{ fetch('/api/approvals').then(r=>r.json()).then(setRows); },[]);\n  return (\n    <div className=\"min-h-screen bg-neutral-950 text-neutral-100 p-6\">\n      <h1 className=\"text-2xl font-semibold\">Approvals Center</h1>\n      <p className=\"text-neutral-400\">Draft → Review → Feedback → Approval. Send share links to clients.</p>\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5\">\n        {rows.map(r => <ApproveCard key={r.id} item={r} />)}\n      </div>\n    </div>\n  );\n}\n\nfunction ApproveCard({ item }: any){\n  return (\n    <div className=\"rounded-2xl p-4 bg-white/5 border border-white/10\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <div className=\"text-sm uppercase text-neutral-400\">{item.kind}</div>\n          <div className=\"text-lg font-medium\">{item.title}</div>\n        </div>\n        <StatusBadge status={item.status} />\n      </div>\n      {item.draftUrl && <img src={item.draftUrl} alt=\"draft\" className=\"mt-4 rounded-lg border border-white/10\" />}\n      <div className=\"mt-4 flex gap-2\">\n        <button className=\"px-3 py-2 rounded-lg bg-pink-600/80 hover:bg-pink-600\">Send</button>\n        <button className=\"px-3 py-2 rounded-lg bg-white/10 hover:bg-white/20\">Request Feedback</button>\n        <button className=\"px-3 py-2 rounded-lg bg-emerald-600/80 hover:bg-emerald-600\">Mark Approved</button>\n      </div>\n    </div>\n  );\n}\n\nfunction StatusBadge({ status }: {status:string}){\n  const map:any = { draft:'bg-neutral-700', sent:'bg-blue-600', feedback:'bg-yellow-600', approved:'bg-emerald-600', rejected:'bg-rose-700' };\n  return <span className={`text-xs px-2 py-1 rounded-full ${map[status]||'bg-neutral-700'}`}>{status}</span>;\n}\n"
    },
    {
      "path": "client/src/pages/Projects.tsx",
      "action": "create",
      "contents": "import { useEffect, useState } from 'react';\n\nexport default function Projects(){\n  const [tasks, setTasks] = useState<any[]>([]);\n  useEffect(()=>{ fetch('/api/tasks').then(r=>r.json()).then(setTasks); },[]);\n  const todo = tasks.filter(t=>!t.done);\n  const done = tasks.filter(t=>t.done);\n  return (\n    <div className=\"min-h-screen bg-neutral-950 text-neutral-100 p-6\">\n      <h1 className=\"text-2xl font-semibold\">Projects & Tasks</h1>\n      <p className=\"text-neutral-400\">Auto templates, relative due dates, client-visible action items.</p>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6\">\n        <Column title={`To Do (${todo.length})`} items={todo} />\n        <Column title={`Done (${done.length})`} items={done} />\n      </div>\n    </div>\n  );\n}\n\nfunction Column({ title, items }: any){\n  return (\n    <div className=\"rounded-2xl p-4 bg-white/5 border border-white/10 min-h-[300px]\">\n      <div className=\"flex items-center justify-between\"><h2 className=\"font-medium\">{title}</h2></div>\n      <ul className=\"mt-4 space-y-3\">\n        {items.map((t:any)=> (\n          <li key={t.id} className=\"p-3 rounded-lg bg-black/30 border border-white/10\">\n            <div className=\"text-sm font-medium\">{t.title}</div>\n            <div className=\"text-xs text-neutral-400\">Due: {t.dueAt ? new Date(t.dueAt).toLocaleString() : '—'}</div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"
    },
    {
      "path": "client/src/App.tsx",
      "action": "patch",
      "contents": "// ➕ routes (near your existing router)\nimport CRM from './pages/CRM';\nimport Approvals from './pages/Approvals';\nimport Projects from './pages/Projects';\n// ... inside <Routes>\n// <Route path=\"/crm\" element={<CRM/>} />\n// <Route path=\"/approvals\" element={<Approvals/>} />\n// <Route path=\"/projects\" element={<Projects/>} />\n"
    },
    {
      "path": ".env.example",
      "action": "patch_or_create",
      "contents": "JWT_SECRET=changeme\nDATABASE_URL=postgres://user:pass@host:5432/db\n# Optional agent config (future wiring)\nSOCIAL_DEFAULT_PLATFORM=instagram\nDRIVE_WATCHER_ENABLED=true\n"
    }
  ]
}
```

---

## 🚀 How to apply

1. **Create migration & build**

* Place the files per paths above (or paste the whole JSON into your loader).
* Run:

  ```
  npm run drizzle:migrate
  npm run build && npm run start
  ```

  (Adjust to your scripts—same flow you used in Phase 10.)

2. **Wire routes**

* `server/index.ts` patch already mounts `routes.crm.ts`. Ensure it sits after your auth middleware so `req.user` exists.

3. **Visit new pages**

* `/crm` – dashboard tiles (Clients / Bookings / Approvals / Tasks)
* `/approvals` – approval cards with status badges
* `/projects` – task columns (To-Do / Done)

---

## 🧪 Smoke tests (2 minutes)

* POST `/api/crm/clients` with `{ name: "Acme Weddings", email: "bride@acme.com" }` → 201.
* POST `/api/bookings` with a valid `clientId` → 201, `status=lead`.
* POST `/api/approvals` with `{ bookingId, kind:'overlay', title:'Main Template' }` → 201.
* PATCH `/api/approvals/:id` `{ status:'sent' }` → status updates.
* POST `/api/tasks` `{ bookingId, title:'Design overlay', offsetDays:10, offsetDirection:'before' }` → 201.

---

## 🔮 What this unlocks next (fast follow payloads)

* **11.1 Agents Wiring:** Hook `driveWatcher` to your upload events; generate CSV artifacts; enqueue `socialAgent` on gallery publish; cron `reminderAgent`.
* **11.2 Approval Share Links:** Signed client share URLs (`/a/:token`) with approve/reject + feedback (no login).
* **11.3 Task Templates by Package:** Auto-spawn tasks when `bookings.serviceType` is `photobooth|dj|bartender`.
* **11.4 Widget Embeds:** Paddee Look Book + PB Backdrops iframes in the approval flow (with selection callback → writes to `approvals.assetsJson`).

If you want, I’ll immediately drop **Payload 11.1 (Agents Wiring)** with a tiny job runner, Drive webhooks, and a signed share-link mini-router for client approvals.
