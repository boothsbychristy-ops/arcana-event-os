Perfect 🔥
Here’s a **compressed, full-power Empress Expansion Pack** — Payloads **2 through 6** (you’ve already got Payload 1 queued).
Each one flows into the next, uses your existing stack, and keeps payments / OAuth / Twilio for later.
All are Replit-ready: just copy-paste one block at a time into the “Architect / Build with AI” prompt box.

---

# 🗓 **Payload 2 — Sprint 6 : Calendar & Scheduling View**

**Goal:** Give owners + staff a visual schedule of all bookings (month/week/day), fully local.

### Features

* `/calendar` route using `react-big-calendar` + `date-fns`.
* Color bookings by status:
  `proposal → gray | confirmed → emerald | paid → indigo | completed → violet | canceled → rose`.
* Drag to reschedule → confirm modal → PATCH `/api/bookings/:id/time`.
* Filter chips: staff / status / view range.
* Keyboard + mobile friendly.

### API

```js
GET /api/calendar?from=&to=&staff_id=&status=
PATCH /api/bookings/:id/time   // body: { start_at, end_at }
```

### Acceptance Criteria

✅ Calendar renders live bookings.
✅ Dragging updates DB.
✅ Filters work.
✅ Responsive layout.

---

# ⚙️ **Payload 3 — Sprint 7 : Automations & Agent Framework (stub)**

**Goal:** Build the skeleton for your Empress “Agents.”
No real emails/SMS yet—just triggers + logs.

### Schema

```sql
create table if not exists automations(
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references users(id) on delete cascade,
  name text not null,
  is_enabled boolean default true,
  trigger text not null,
  action text not null,
  config jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);
create table if not exists automation_logs(
  id uuid primary key default gen_random_uuid(),
  automation_id uuid references automations(id) on delete cascade,
  run_at timestamptz default now(),
  status text not null default 'ok',
  message text
);
```

### Server + Cron

* Add `/server/agents/index.ts` registry + dispatcher.
* Use `node-cron` to fire hourly; log “ok” runs.
* API:

  * `GET/POST /api/automations`
  * `PATCH /api/automations/:id`
  * `GET /api/automations/logs?automation_id=`
  * `POST /api/agents/run/:id` → manual run.

### UI

* `/automations` page with table + enable / disable toggle.
* “New Automation” modal (Trigger, Action, JSON config).
* Logs panel shows last 20 runs.

### Acceptance Criteria

✅ Create automation → saved.
✅ Manual run logs.
✅ Cron executes enabled automations.
✅ Disabling stops runs.

---

# 📊 **Payload 4 — Sprint 8 : Analytics & Reports**

**Goal:** Real analytics dashboard with date filters + CSV export.

### API (Aggregates via Drizzle)

```
GET /api/analytics/summary?from=&to=
GET /api/analytics/revenue-series?interval=month
GET /api/analytics/booking-trends
GET /api/analytics/staff-utilization
GET /api/analytics/export.csv
```

### UI

* `/analytics` route.
* KPI cards (MTD Revenue, Bookings, Avg Value, Conversion Rate, Utilization).
* Recharts Line + Bar + Pie visuals.
* Date range picker.
* “Download CSV” button.

### Acceptance Criteria

✅ Charts render + update with range.
✅ KPIs = backend totals.
✅ CSV downloads cleanly.
✅ Mobile responsive.

---

# 🪞 **Payload 5 — Sprint 9 : Branding / Multi-Brand / White-Label**

**Goal:** Per-brand color themes + logos, ready for white-label resale.

### Schema

```sql
create table if not exists brands(
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references users(id) on delete cascade,
  name text not null,
  subdomain text,
  logo_url text,
  primary_color text default '#3c0b43',
  gradient jsonb default '["#d946ef","#fb7185","#f59e0b"]'::jsonb,
  cta_color text default '#3c0b43',
  is_primary boolean default false,
  created_at timestamptz default now()
);
```

### API + UI

* `GET/POST /api/brands`
* `PATCH /api/brands/:id` (update colors / is_primary)
* `POST /api/brands/:id/logo` (upload)
* `GET /api/theme` → returns active CSS vars (`--brand-primary`, `--grad-start`, etc.)
* `/settings/branding` page: manage brands + live preview.
* App loads theme via `/api/theme` → applies vars at runtime.

### Acceptance Criteria

✅ Multiple brands exist; mark primary.
✅ Theme endpoint drives live color updates.
✅ Logo appears in navbar.
✅ Ready for future subdomain routing.

---

# 🧠 **Payload 6 — Sprint 10 : UI Polish + Mini Marketplace Preview**

*(Optional bonus to bridge into Mirror Marketplace phase)*

**Goal:** finalize UX / animations + lay foundation for uploadable assets.

### Scope

* Global gradient refactor → CSS vars (`--grad-start`, `--grad-mid`, `--grad-end`).
* Animate modals & toasts (`framer-motion`).
* Add soft shadow / hover scale to cards.
* `/marketplace` (stub): list demo “assets” from a `marketplace_items` table.

  ```sql
  create table if not exists marketplace_items(
    id uuid primary key default gen_random_uuid(),
    title text, description text, price_cents int default 0,
    image_url text, created_at timestamptz default now()
  );
  ```
* Public card grid; filters by category (future expansion).

### Acceptance Criteria

✅ Visual theme refactor done.
✅ Smooth animations.
✅ Marketplace stub renders items from DB.
✅ Ready for Mirror Protocol integration phase.

---

### 🌐 Global Guidelines (for all payloads)

* Keep auth / roles / rainbow aesthetic.
* Use toasts for success & error.
* Maintain skeletons and empty states.
* Do NOT add Square, Twilio, Mailgun, OAuth yet.
* Each payload should build incrementally on the existing repo.

---

Once Replit finishes **Payload 1**, paste **Payload 2**, then work sequentially through 3-6.
By the end of Payload 6 you’ll have:

* ✅ Full client + staff intake
* ✅ Calendar / scheduler
* ✅ Agent automation core
* ✅ Analytics suite
* ✅ Brand-ready UI shell
* ✅ Marketplace seed for Mirror Protocol Phase II.
