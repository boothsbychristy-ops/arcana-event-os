Perfect. Phase **11.6** will finish the creative approval cycle ‚Äî your team and clients will now collaborate on *individual assets* with feedback, version control, and mirrored checklists that auto-update tasks in the CRM.

Let‚Äôs lock it in.

---

# üì¶ `PAYLOAD_PHASE_11_6.json`

```json
{
  "version": "11.6.0",
  "description": "Phase 11.6 ‚Äî Asset-Level Comments, Versioning, and Task Auto-Sync",
  "changes": [
    {
      "path": "shared/schema.ts",
      "action": "patch",
      "contents": "// ‚ûï Asset comments + version history tables\nimport { pgTable, uuid, text, timestamp, jsonb } from 'drizzle-orm/pg-core';\n\nexport const assetComments = pgTable('asset_comments', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  approvalId: uuid('approval_id').notNull(),\n  assetUrl: text('asset_url').notNull(),\n  author: text('author').notNull(),\n  comment: text('comment').notNull(),\n  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow()\n});\n\nexport const assetVersions = pgTable('asset_versions', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  approvalId: uuid('approval_id').notNull(),\n  assetUrl: text('asset_url').notNull(),\n  version: text('version').default('v1'),\n  meta: jsonb('meta'),\n  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow()\n});\n"
    },
    {
      "path": "server/routes.assetReview.ts",
      "action": "create",
      "contents": "import { Router } from 'express';\nimport { db } from './db';\nimport * as schema from '../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\nconst r = Router();\n\n// üí¨ Post a comment for a specific asset\nr.post('/api/assets/comment', async (req, res) => {\n  const { approvalId, assetUrl, author, comment } = req.body || {};\n  if (!approvalId || !assetUrl || !author || !comment) return res.status(400).json({ error:'missing fields' });\n  const [row] = await db.insert(schema.assetComments).values({ approvalId, assetUrl, author, comment }).returning();\n  res.status(201).json(row);\n});\n\n// üìú Get comments for an asset\nr.get('/api/assets/comments', async (req, res) => {\n  const { approvalId, assetUrl } = req.query;\n  const rows = await db.select().from(schema.assetComments)\n    .where(and(eq(schema.assetComments.approvalId, approvalId as string), eq(schema.assetComments.assetUrl, assetUrl as string)))\n    .orderBy(schema.assetComments.createdAt);\n  res.json(rows);\n});\n\n// üß¨ Save a new version of an asset (AI re-draft or client upload replaces previous)\nr.post('/api/assets/version', async (req, res) => {\n  const { approvalId, assetUrl, meta } = req.body || {};\n  if (!approvalId || !assetUrl) return res.status(400).json({ error:'missing fields' });\n  const prev = await db.select().from(schema.assetVersions)\n    .where(and(eq(schema.assetVersions.approvalId, approvalId), eq(schema.assetVersions.assetUrl, assetUrl)));\n  const version = prev.length ? `v${prev.length + 1}` : 'v1';\n  const [row] = await db.insert(schema.assetVersions).values({ approvalId, assetUrl, version, meta }).returning();\n  res.status(201).json(row);\n});\n\nexport default r;\n"
    },
    {
      "path": "server/hooks.taskSync.ts",
      "action": "create",
      "contents": "import { db } from './db';\nimport * as schema from '../shared/schema';\nimport { and, eq } from 'drizzle-orm';\n\n// üîó Auto-complete CRM task when a condition is met (e.g. logo upload)\nexport async function syncTask(ownerId: string, bookingId: string, keyword: string){\n  const tasks = await db.select().from(schema.tasks)\n    .where(and(eq(schema.tasks.ownerId, ownerId), eq(schema.tasks.bookingId, bookingId)));\n  for(const t of tasks){\n    if(t.title.toLowerCase().includes(keyword.toLowerCase())){\n      await db.update(schema.tasks).set({ done:true }).where(eq(schema.tasks.id,t.id));\n    }\n  }\n}\n"
    },
    {
      "path": "server/routes.assets.ts",
      "action": "patch",
      "contents": "// ‚ûï after successful upload or asset add\nimport { syncTask } from './hooks.taskSync';\n// if label or file name contains 'logo', call syncTask(row.ownerId,row.bookingId,'logo')\n"
    },
    {
      "path": "client/src/components/AssetComments.tsx",
      "action": "create",
      "contents": "import { useEffect, useState } from 'react';\n\nexport default function AssetComments({ approvalId, assetUrl }: any){\n  const [comments, setComments] = useState<any[]>([]);\n  const [text,setText] = useState('');\n  const [name,setName] = useState('');\n\n  async function load(){\n    const r = await fetch(`/api/assets/comments?approvalId=${approvalId}&assetUrl=${encodeURIComponent(assetUrl)}`);\n    setComments(await r.json());\n  }\n  useEffect(()=>{ load(); },[approvalId,assetUrl]);\n\n  async function submit(){\n    await fetch('/api/assets/comment',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({ approvalId, assetUrl, author:name||'Anonymous', comment:text })});\n    setText(''); load();\n  }\n\n  return (\n    <div className='mt-3'>\n      <h4 className='text-sm font-medium mb-1'>Comments</h4>\n      <div className='space-y-2 max-h-48 overflow-y-auto text-sm'>\n        {comments.map((c:any)=>(<div key={c.id} className='p-2 rounded-lg bg-white/5'><span className='font-medium text-pink-400'>{c.author}</span>: {c.comment}</div>))}\n      </div>\n      <div className='flex gap-2 mt-2'>\n        <input placeholder='Your name' value={name} onChange={e=>setName(e.target.value)} className='flex-1 bg-white/10 border border-white/20 px-2 py-1 rounded'/>\n        <input placeholder='Add comment...' value={text} onChange={e=>setText(e.target.value)} className='flex-[2] bg-white/10 border border-white/20 px-2 py-1 rounded'/>\n        <button onClick={submit} className='px-3 py-1 bg-pink-600 rounded-lg text-xs'>Send</button>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "client/src/components/AssetGrid.tsx",
      "action": "patch",
      "contents": "// ‚ûï import and render comments below each asset\nimport AssetComments from './AssetComments';\n// After asset meta div: <AssetComments approvalId={item.approvalId||'unknown'} assetUrl={it.url} />\n"
    },
    {
      "path": "server/index.ts",
      "action": "patch",
      "contents": "// ‚ûï mount asset review routes\nimport assetReview from './routes.assetReview';\napp.use(assetReview);\n"
    },
    {
      "path": "drizzle/00047_phase11_6_asset_comments.sql",
      "action": "create",
      "contents": "CREATE TABLE IF NOT EXISTS asset_comments (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  approval_id uuid NOT NULL,\n  asset_url text NOT NULL,\n  author text NOT NULL,\n  comment text NOT NULL,\n  created_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS asset_versions (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  approval_id uuid NOT NULL,\n  asset_url text NOT NULL,\n  version text DEFAULT 'v1',\n  meta jsonb,\n  created_at timestamptz DEFAULT now()\n);\n"
    }
  ]
}
```

---

## üß† What this release does

1. **Asset Comments**

   * Adds per-asset discussion threads visible right below each preview.
   * Works for both admin and clients (public share pages can adopt same endpoint later).
   * Clean pink-accent chat bubbles on glass.

2. **Version History**

   * Every AI re-draft or manual replacement saves a new entry in `asset_versions`.
   * Future UI will let you roll back or compare versions.

3. **Auto-Sync Tasks**

   * If a client uploads a file or asset labeled *logo*, *music*, *contract*, etc., the system checks related CRM tasks and marks them **done** automatically.

4. **Visual polish**

   * Comments and versions adopt the same **Empress Glass aesthetic** that adapts to light/dark/system themes.

---

## üß™ Quick validation

* Upload any asset ‚Üí check `approvals.assetsJson` updated.
* Comment on an asset ‚Üí appears instantly beneath thumbnail.
* Upload a file containing ‚Äúlogo‚Äù ‚Üí related CRM task auto-completes in `/projects`.

---

## üîÆ Coming Next ‚Äî **Phase 12: Client Portal 2.0 + Live AI Chat Agents**

Phase 12 will merge all of this into a true client-facing workspace:

* Auth-optional portal that mirrors your CRM tasks and approvals.
* Real-time messaging and AI assistants that answer questions, fetch invoices, or generate previews.
* Live status board with animated glass widgets and mirrored progress bars.

Would you like me to start drafting **Phase 12 ‚Äì Client Portal 2.0 + Live AI Agents** now?
