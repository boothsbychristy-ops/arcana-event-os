Perfect. üëë
Here‚Äôs your **ready-to-paste Replit Builder Prompt v5** for **Sprint 4: Staff Assignment + Invoice Flow + Deliverables Tab**.
This continues directly from your current Rainbow CRM (2) build ‚Äî no external APIs or payment SDKs yet.

---

## üß© **Replit Builder Prompt ‚Äî Rainbow CRM Sprint 4**

> **Goal:** Expand the working CRM into a full event-management workflow by adding staff assignment UI, invoice creation / mark-paid actions, and a deliverables tab inside bookings.
> **Keep:** same stack (React + Vite + Tailwind + shadcn/ui + Express + Drizzle + PostgreSQL).
> **Skip:** Square, Twilio, Mailgun ‚Äì for later.

---

### 1Ô∏è‚É£ Staff Assignment UI

**Objective:** Assign and manage staff directly from each Booking.

**Implementation**

* Add endpoint `POST /api/bookings/:id/assign-staff` ‚Üí body `{staff_id}` creates record in `staff_assignments`.
* Add `DELETE /api/bookings/:id/assign-staff/:staff_id` to remove assignment.
* In Booking Detail page:

  * Render multi-select dropdown of available staff (from `GET /api/staff`).
  * Show assigned avatars with initials or `avatar_url`.
  * On save: toast ‚ÄúStaff updated‚Äù and update Dashboard counter ‚ÄúNo Staff Assigned‚Äù.

---

### 2Ô∏è‚É£ Invoice Controls

**Goal:** Allow owners to generate and close invoices without real payments yet.

**Implementation**

* Add button ‚ÄúGenerate Invoice‚Äù in Booking Detail ‚Üí `POST /api/invoices` ({ booking_id }) ‚Üí creates invoice with subtotal = booking.meta.total_cents or 0.
* Add button ‚ÄúMark Paid‚Äù in Invoice Detail ‚Üí `PATCH /api/invoices/:id` { status: "paid" }.
* When status changes ‚Üí toast ‚ÄúInvoice marked paid‚Äù + Dashboard recount.
* UI shows status chip (open | partial | paid).

---

### 3Ô∏è‚É£ Deliverables Tab

**Purpose:** Track final photos, videos, or links for each booking.

**Database Migration**

```sql
create table if not exists deliverables (
  id uuid primary key default gen_random_uuid(),
  booking_id uuid references bookings(id) on delete cascade,
  kind text default 'link',
  title text,
  url text,
  created_at timestamptz default now()
);
```

**API**

* `GET /api/bookings/:id/deliverables`
* `POST /api/bookings/:id/deliverables` ({ title, url })
* `DELETE /api/deliverables/:id`

**UI**

* New tab in Booking Detail ‚Üí table of deliverables (title + hyperlink).
* ‚ÄúAdd Link‚Äù button opens mini-modal (title + URL fields).
* Toast on save / delete.

---

### 4Ô∏è‚É£ Dashboard Counter Updates

* Add live queries for:

  * `No Staff Assigned` ‚Üí bookings without rows in staff_assignments.
  * `Unpaid Invoices` ‚Üí invoices status ‚â† paid.
  * `Open Deliverables` ‚Üí bookings without deliverables.
* Use TanStack Query invalidate on mutations.

---

### 5Ô∏è‚É£ Visual / UX Polish

| Area              | Change                                                                    |
| ----------------- | ------------------------------------------------------------------------- |
| Gradient Refactor | Move rainbow utilities to `theme.css` (`.btn-gradient`, `.nav-gradient`). |
| Cards             | Add soft shadow + rounded-2xl + hover:shadow-md.                          |
| Modal animation   | Use `framer-motion` spring scale for proposal & deliverables dialogs.     |
| Toasts            | Add small bounce in/out animation.                                        |

---

### 6Ô∏è‚É£ Acceptance Criteria

| # | Feature                | Verified When                                            |
| - | ---------------------- | -------------------------------------------------------- |
| 1 | Staff assignment works | Dropdown saves to DB + avatars render + counter updates. |
| 2 | Invoice generated      | Invoice record appears + toast shows success.            |
| 3 | Mark Paid              | Status changes ‚Üí paid + Dashboard updates.               |
| 4 | Deliverables tab       | CRUD links persist correctly.                            |
| 5 | Gradient classes       | Navbar and buttons use shared utilities.                 |

---

### 7Ô∏è‚É£ Stretch Goals (if Replit finishes early)

* Add role permissions (Owner/Admin/Staff).
* Auto-scroll in Messages tab.
* Dashboard stats cards for MTD Revenue & Staff Utilization.

---

### 8Ô∏è‚É£ Do Not Include Yet

‚ùå No Square/Stripe integration
‚ùå No SMS or Email automation
‚ùå No Google OAuth Calendar

---

### ‚úÖ Expected Deliverables

* New API routes (`/api/bookings/:id/assign-staff`, `/api/bookings/:id/deliverables`, `/api/invoices/:id`)
* Updated Booking Detail UI (Staff picker + Deliverables tab + Generate/Mark Paid buttons)
* Dashboard counters refresh live
* Gradient refactor applied

---

Paste everything above into the Replit ‚ÄúArchitect / Build with AI‚Äù prompt box and run.
It will automatically detect your existing schema, apply migrations, and update the front-end without disturbing authentication or proposal logic.

When Replit confirms build success, we‚Äôll prep **Sprint 5: Dashboard Metrics + Analytics Charts** next.
